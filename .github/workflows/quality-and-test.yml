name: Quality & Testing

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  workflow_dispatch:

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '10.15.0'
  UBUNTU_DEPS_VERSION: '1.1'
  ACTIONS_CHECKOUT_VERSION: 'v4'
  CACHE_VERSION: 'v4.2.0'

permissions:
  actions: write
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  auto-format:
    name: Auto-fix Formatting
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js Environment
        uses: ./.github/actions/setup-node.yml
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}

      - name: Setup Rust Environment
        uses: ./.github/actions/setup-rust.yml
        with:
          platform: ubuntu-latest
          components: rustfmt


      - name: Auto-fix Prettier formatting
        run: npx prettier --write . --ignore-unknown

      - name: Auto-fix Rust formatting
        run: cargo fmt --all --manifest-path src-tauri/Cargo.toml

      - name: Commit formatting fixes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          if ! git diff --staged --quiet; then
            git commit -m "Auto-fix formatting issues"
            git push
          else
            echo "No formatting changes to commit"
          fi

  formatting:
    name: Code Formatting Check
    runs-on: ubuntu-latest
    needs: auto-format
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js Environment
        uses: ./.github/actions/setup-node.yml
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}


      - name: Check EditorConfig compliance
        uses: editorconfig-checker/action-editorconfig-checker@main

      - name: Run EditorConfig checker with exclusions
        run: editorconfig-checker -exclude 'Cargo\.lock|dist/.*|.*\.(md|icns|ico|png|jpg|jpeg|gif|svg|desktop|wxs|plist|toml)$|cli\.js$|node_modules/.*|target/.*|src-tauri/(target|icons|png)/.*'

      - name: Check Prettier formatting
        run: npx prettier --check . --ignore-unknown

  rust-quality:
    name: Rust Code Quality
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false
    defaults:
      run:
        shell: bash
        working-directory: src-tauri
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust Environment
        uses: ./.github/actions/setup-rust.yml
        with:
          platform: ${{ matrix.os }}
          components: rustfmt, clippy

      - uses: rui314/setup-mold@v1
        if: matrix.os == 'ubuntu-latest'

      - uses: taiki-e/install-action@v1
        with:
          tool: cargo-hack

      - name: Setup Ubuntu Dependencies
        if: matrix.os == 'ubuntu-latest'
        uses: ./.github/actions/setup-ubuntu-deps.yml

      - name: Check Rust formatting
        run: cargo fmt --all -- --color=always --check

      - name: Run Clippy lints
        run: cargo hack --feature-powerset --exclude-features cli-build --no-dev-deps clippy

  cli-tests:
    name: CLI Tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js Environment
        uses: ./.github/actions/setup-node.yml
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}

      - name: Setup Rust Environment
        uses: ./.github/actions/setup-rust.yml
        with:
          platform: ${{ matrix.os }}


      - name: Setup Ubuntu Dependencies
        if: matrix.os == 'ubuntu-latest'
        uses: ./.github/actions/setup-ubuntu-deps.yml

      - name: Setup Windows Environment
        if: matrix.os == 'windows-latest'
        uses: ./.github/actions/setup-windows.yml

      - name: Build CLI
        run: pnpm run cli:build

      - name: Run CLI Test Suite
        run: pnpm test
        env:
          CI: true
          NODE_ENV: test

      - name: Test CLI Integration
        shell: bash
        run: |
          echo "Testing CLI integration with weekly.tw93.fun..."
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            timeout 120s node dist/cli.js https://weekly.tw93.fun --name "CITestWeekly" --debug || true
          else
            timeout 30s node dist/cli.js https://weekly.tw93.fun --name "CITestWeekly" --debug || true
          fi
          echo "Integration test completed (expected to timeout)"

  release-build-test:
    name: Release Build Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js Environment
        uses: ./.github/actions/setup-node.yml
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}

      - name: Setup Rust Environment
        uses: ./.github/actions/setup-rust.yml
        with:
          platform: ${{ matrix.os }}

      - name: Add macOS targets
        if: matrix.os == 'macos-latest'
        run: |
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin

      - name: Setup Ubuntu Dependencies
        if: matrix.os == 'ubuntu-latest'
        uses: ./.github/actions/setup-ubuntu-deps.yml

      - name: Setup Windows Environment
        if: matrix.os == 'windows-latest'
        uses: ./.github/actions/setup-windows.yml

      - name: Build CLI
        run: pnpm run cli:build

      - name: Run Release Build Test
        run: ./tests/release.js
        timeout-minutes: 30
        env:
          CI: true
          NODE_ENV: test

      - name: List generated files
        shell: bash
        run: |
          echo "Generated files in project root:"
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            ls -la *.{dmg,app,msi,deb,AppImage} 2>/dev/null || echo "No direct output files found"
          else
            find . -maxdepth 1 \( -name "*.dmg" -o -name "*.app" -o -name "*.msi" -o -name "*.deb" -o -name "*.AppImage" \) || echo "No direct output files found"
          fi
          echo ""
          echo "Generated files in target directories:"
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            find src-tauri/target -type f \( -name "*.dmg" -o -name "*.app" -o -name "*.msi" -o -name "*.deb" -o -name "*.AppImage" \) 2>/dev/null || echo "No target output files found"
          else
            find src-tauri/target -name "*.dmg" -o -name "*.app" -o -name "*.msi" -o -name "*.deb" -o -name "*.AppImage" 2>/dev/null || echo "No target output files found"
          fi

  summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs: [formatting, rust-quality, cli-tests, release-build-test]
    if: always()
    steps:
      - name: Generate Summary
        run: |
          echo "# Quality & Testing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.formatting.result }}" == "success" ]; then
            echo "✅ **Code Formatting**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Code Formatting**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.rust-quality.result }}" == "success" ]; then
            echo "✅ **Rust Quality**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Rust Quality**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.cli-tests.result }}" == "success" ]; then
            echo "✅ **CLI Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **CLI Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.release-build-test.result }}" == "success" ]; then
            echo "✅ **Release Build Test**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Release Build Test**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
